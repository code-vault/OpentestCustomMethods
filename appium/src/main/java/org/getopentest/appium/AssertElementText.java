package org.getopentest.appium;

import org.getopentest.annotations.TestActionArgument;
import org.getopentest.annotations.TestActionClass;
import org.getopentest.annotations.Type;
import org.getopentest.appium.core.SwipingAction;
import org.openqa.selenium.By;

@TestActionClass(
        description = "Validates a UI element's visible text.")
@TestActionArgument(name = "locator", type = Type.MAP, optional = false,
        description = "The locator of the UI element.")
@TestActionArgument(name = "text", type = Type.STRING, optional = false,
        description = "The expected text. If the element's text differs from "
        + "the expected, the action will fail.")

/**
 * Validates a UI element's visible text.
 */
public class AssertElementText extends SwipingAction {

    @Override
    public void run() {
        super.run();

        By locator = readLocatorArgument("locator");
        String text = readStringArgument("text", null);
        String textContains = readStringArgument("textContains", null);
        boolean caseInsensitive = this.readBooleanArgument("caseInsensitive", false);

        this.swipeAndCheckElementVisible(locator, this.getSwipeOptions());

        String actualText = this.getElement(locator).getText();
        boolean textIsValid = false;

        if (text != null) {
            if (caseInsensitive) {
                textIsValid = actualText.equalsIgnoreCase(text);
            } else {
                textIsValid = actualText.equals(text);
            }

            if (!textIsValid) {
                throw new RuntimeException(String.format(
                        "Element %s failed validation. The expected value was \"%s\", "
                        + "but the actual value was \"%s\".",
                        locator, text, actualText));
            }
        } else if (textContains != null) {
            if (caseInsensitive) {
                textIsValid = actualText.toLowerCase().contains(textContains.toLowerCase());
            } else {
                textIsValid = actualText.contains(textContains);
            }

            if (!textIsValid) {
                throw new RuntimeException(String.format(
                        "Element %s failed validation. We expected its value to contain \"%s\", "
                        + "but the actual value was \"%s\".",
                        locator, textContains, actualText));
            }
        } else {
            throw new RuntimeException(
                    "Neither the \"text\" argument, nor the \"textContains\" "
                    + "argument were provided.");
        }
    }
}
