/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.getopentest.util;

import static org.testng.Assert.*;
import org.testng.annotations.Test;

/**
 *
 * @author mc28256
 */
public class TypeConverterNGTest {

    @Test
    public void testBooleanToBooolean() {
        assertEquals(TypeConverter.toBooolean(false), Boolean.FALSE);
        assertEquals(TypeConverter.toBooolean(Boolean.FALSE), Boolean.FALSE);
    }

    @Test
    public void testStringToBooolean() {
        assertEquals(TypeConverter.toBooolean("false"), Boolean.FALSE);
        assertEquals(TypeConverter.toBooolean("FALSE"), Boolean.FALSE);
        assertEquals(TypeConverter.toBooolean("0"), Boolean.FALSE);
        assertEquals(TypeConverter.toBooolean("no"), Boolean.FALSE);
        assertEquals(TypeConverter.toBooolean("NO"), Boolean.FALSE);
        assertEquals(TypeConverter.toBooolean("true"), Boolean.TRUE);
        assertEquals(TypeConverter.toBooolean("TRUE"), Boolean.TRUE);
        assertEquals(TypeConverter.toBooolean("1"), Boolean.TRUE);
        assertEquals(TypeConverter.toBooolean("yes"), Boolean.TRUE);
        assertEquals(TypeConverter.toBooolean("YES"), Boolean.TRUE);
    }

    @Test
    public void testStringToBoooleanNegative() {
        try {
            TypeConverter.toBooolean("I'm no boolean");

            fail("Expected exception was not thrown");
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("value I'm no boolean"));
        }
    }

    @Test
    public void testStringToInteger() {
        assertEquals(TypeConverter.toInteger("123"), (Integer) 123);
        assertEquals(TypeConverter.toInteger("12.0"), (Integer) 12);
    }

    @Test
    public void testStringToIntegerNegative() {
        try {
            assertEquals(TypeConverter.toInteger("12.3"), (Integer) 12);

            fail("Expected exception was not thrown");
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("value 12.3"));
        }
    }
    
    @Test
    public void testDoubleToInteger() {
        assertEquals(TypeConverter.toInteger(123.0), (Integer) 123);
        assertEquals(TypeConverter.toInteger(-123.0), (Integer) (-123));
    }

    @Test
    public void testDoubleToIntegerNegative() {
        try {
            assertEquals(TypeConverter.toInteger(123.4), (Integer) 123);

            fail("Expected exception was not thrown");
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("value 123.4"));
        }
    }
}
