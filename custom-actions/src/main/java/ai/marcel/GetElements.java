package ai.marcel;

import java.util.ArrayList;
import java.util.List;

import org.getopentest.annotations.TestActionArgument;
import org.getopentest.annotations.TestActionClass;
import org.getopentest.annotations.Type;
import org.getopentest.appium.core.AppiumTestAction;
import org.getopentest.appium.core.Condition;
import org.getopentest.appium.core.SwipeCoordinates;
import org.getopentest.appium.core.SwipeOptions;
import org.getopentest.logging.Logger;
import org.openqa.selenium.By;
import io.appium.java_client.MobileElement;

@TestActionClass(description = "Finds a list of element that qualify a specified locator.")
@TestActionArgument(name = "container", type = Type.OBJECT, optional = true, description = "Locator object that identifies the container to find elements in.")
@TestActionArgument(name = "locator", type = Type.OBJECT, optional = false, description = "Locator of one of the type of elements to find.")
public class GetElements extends AppiumTestAction {
	
	private List<MobileElement> elementList = null;
	
	private List<MobileElement> swipeAndStoreElements(SwipeOptions options) {
		List<MobileElement> elementList = new ArrayList<>();
		SwipeCoordinates swipeCoords = calculateSwipeCoordinates(options);
        Logger.trace(String.format("Swiping from (%s, %s) to (%s, %s)...",
                swipeCoords.fromX, swipeCoords.fromY, swipeCoords.toX, swipeCoords.toY));
        boolean reachedEdge = false;
        String lastPageSource = null;
        // The number of times in a row we found the page source to be
        // identical with what we had previously
        int samePageSourceCount = 0;
        int samePageSourceRetries = options.maxEdgeCheckRetries;
        By elementlocator = options.targetElement;
        while (!reachedEdge) {
            String currentPageSource = driver.getPageSource();
            if (!(lastPageSource == null) && lastPageSource.equals(currentPageSource)) {
                samePageSourceCount++;
            }
            lastPageSource = currentPageSource;

            if (samePageSourceCount >= samePageSourceRetries) {
                reachedEdge = true;
                Logger.debug(
                        "We'll stop swiping now, because it looks like we "
                        + "reached the end of the page.");
                break;
            }
        	elementList.addAll(driver.findElements(elementlocator));
            this.swipe(
                    swipeCoords.fromX,
                    swipeCoords.fromY,
                    swipeCoords.toX,
                    swipeCoords.toY,
                    options.durationMs != null
                            ? Math.max(options.durationMs, 200)
                            : 1000);
        }
        return elementList;
	}

	@Override
	public void run() {
		super.run();
		By containerLocator = this.readLocatorArgument("container");
		By elementLocator = this.readLocatorArgument("locator", null);
		SwipeOptions options = new SwipeOptions();
        options.swipeContainer = containerLocator;
        options.targetElement = elementLocator;
        options.direction = "down";
		if (containerLocator != null) {
			this.elementList = this.swipeAndStoreElements(options);
			int elementCount = this.elementList.size();
			this.writeOutput("count", elementCount);
//			this.writeOutput("list", this.elementList);
			System.out.println(this.elementList.toString());
		} else {
			throw new RuntimeException(
					"You must provide the valid locator of the container in containerLocator and locator of the elements in elementLocator.");
		}
	}
}
