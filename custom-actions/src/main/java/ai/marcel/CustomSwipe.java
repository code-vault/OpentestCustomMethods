package ai.marcel;
 
import java.util.HashMap;
import java.util.Map;
 
import org.getopentest.annotations.TestActionArgument;
import org.getopentest.annotations.TestActionClass;
import org.getopentest.annotations.Type;
import org.getopentest.appium.core.AppiumTestAction;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Point;
import org.openqa.selenium.remote.RemoteWebElement;
 
import io.appium.java_client.MobileElement;
import io.appium.java_client.touch.offset.PointOption;
 
@TestActionClass(description = "Performs a Drag and Drop action on an element or at the specified coordinates.")
@TestActionArgument(name = "locator", type = Type.OBJECT, optional = false, description = "Locator object that identifies the element to perform hold-swipe.")
@TestActionArgument(name = "platform", type = Type.OBJECT, optional = true, description = "Takes platform as parameter(android/ios) default is android.")
@TestActionArgument(name = "direction", type = Type.OBJECT, optional = false, description = "Swipe direction(up/down/left/right)")
public class CustomSwipe extends AppiumTestAction {
       @Override
       public void run() {
              super.run();
 
              By locator = this.readLocatorArgument("locator", null);
              String direction = this.readStringArgument("direction");
              String platform = this.readStringArgument("platform", "android");
              if (locator != null) {
                     MobileElement element = this.getElement(locator);
                     if(platform.equalsIgnoreCase("android")) {
                           Point position = element.getLocation();
                           Dimension dimension = element.getSize();
                           int xStart = position.x + (dimension.width / 2);
                           int yStart = position.y + (dimension.height / 2);
                           int xEnd = position.x;
                           int yEnd = yStart;
 
                           AppiumTestAction.getActionsInstance().press(PointOption.point(xStart, yStart))
                                         .moveTo(PointOption.point(xEnd, yEnd)).release().perform();
                     }else if(platform.equalsIgnoreCase("ios")) {
                           JavascriptExecutor js = (JavascriptExecutor) driver;
                           Map<String, Object> params = new HashMap<>();
                           params.put("direction", direction);
                           params.put("element", ((RemoteWebElement) element).getId());
                           js.executeScript("mobile: swipe", params);
                     }
              } else {
                     throw new RuntimeException("You must either provide the locator argument of the element to press, "
                                  + "or the x and y arguments to indicate the exact coordinates to press at.");
              }
       }
}
 